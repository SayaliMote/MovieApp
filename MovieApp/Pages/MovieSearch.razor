@page "/movie-search"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Movie Search</h1>

<div style="display: flex; align-items: center; gap: 10px; margin-bottom: 20px;">
    <input @bind="searchTerm" placeholder="Enter movie title..." />
    <button @onclick="PerformSearch">Search</button>

    @if (movies != null && movies.Any())
    {
        <select @bind="selectedSortOption">
            <option value="TitleAsc">Sort by Title (A-Z)</option>
            <option value="TitleDesc">Sort by Title (Z-A)</option>
            <option value="YearAsc">Sort by Year (Oldest First)</option>
            <option value="YearDesc">Sort by Year (Newest First)</option>
        </select>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@if (movies != null && movies.Any())
{
    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px;">
        @foreach (var movie in movies)
        {
            <div style="border: 1px solid #ddd; padding: 10px; border-radius: 8px; text-align: center; cursor: pointer;" @onclick="() => NavigateToDetails(movie.imdbID)">
                <img src="@movie.Poster" alt="@movie.Title Poster" style="width: 100%; height: auto;" />
                <h5>@movie.Title</h5>
                <p>Year: @movie.Year</p>
            </div>
        }
    </div>
}

@code {
    private string searchTerm = string.Empty;
    private List<Movie>? movies; // Nullable in case no results are found
    private string? errorMessage; // Nullable for optional error messages
    private string selectedSortOption = "TitleAsc"; // Default sorting option

    private async Task PerformSearch()
    {
        // Reset error message and movie list
        errorMessage = null;
        movies = null;

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            errorMessage = "Please enter a movie title.";
            return;
        }

        try
        {
            // Fetch movies from the API
            var response = await Http.GetFromJsonAsync<MovieSearchResult>($"?apikey=69cc7c36&s={searchTerm}");

            if (response != null && response.Response == "True")
            {
                movies = response.Search ?? new List<Movie>();
                SortMovies(); // Sort results immediately after fetching
            }
            else
            {
                // No results or invalid response
                errorMessage = "No movies found for your search. Try a different title.";
            }
        }
        catch (Exception ex)
        {
            // Basic error handling for now
            errorMessage = "Oops! Something went wrong while searching. Please try again.";
        }
    }

    private void NavigateToDetails(string imdbID)
    {
        // Navigate to the movie details page
        NavigationManager.NavigateTo($"/movie-details/{imdbID}");
    }

    private void SortMovies()
    {
        if (movies == null || !movies.Any()) return;

        // Sorting logic based on the selected option
        switch (selectedSortOption)
        {
            case "TitleAsc":
                movies = movies.OrderBy(m => m.Title).ToList();
                break;
            case "TitleDesc":
                movies = movies.OrderByDescending(m => m.Title).ToList();
                break;
            case "YearAsc":
                movies = movies.OrderBy(m => m.Year).ToList();
                break;
            case "YearDesc":
                movies = movies.OrderByDescending(m => m.Year).ToList();
                break;
            default:
                // Fallback to default sorting if something unexpected happens
                movies = movies.OrderBy(m => m.Title).ToList();
                break;
        }
    }

    // Data models for search results
    public class Movie
    {
        public string Title { get; set; } = string.Empty; // Default value to avoid null issues
        public string Year { get; set; } = string.Empty;
        public string imdbID { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Poster { get; set; } = string.Empty;
    }

    public class MovieSearchResult
    {
        public List<Movie>? Search { get; set; } // Nullable since results might be empty
        public string? TotalResults { get; set; }
        public string? Response { get; set; }
    }
}
